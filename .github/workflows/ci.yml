name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php: ['7.4', '8.0', '8.1', '8.2']
        wordpress: ['5.8', '6.0', '6.1', '6.2', '6.3']
    
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php }}
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, mysql, mysqli, pdo_mysql
        coverage: xdebug

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-interaction --no-progress

    - name: Install NPM dependencies
      run: npm ci

    - name: Build assets
      run: npm run build

    - name: Lint PHP code
      run: |
        # PHP Code Sniffer
        ./vendor/bin/phpcs --standard=WordPress --extensions=php --ignore=*/vendor/*,*/node_modules/*,*/tests/* .
        
        # PHP Stan (if configured)
        if [ -f phpstan.neon ]; then
          ./vendor/bin/phpstan analyse --no-progress
        fi

    - name: Lint JavaScript and CSS
      run: |
        npm run lint:js
        npm run lint:css

    - name: Setup WordPress test environment
      run: |
        bash bin/install-wp-tests.sh wordpress_test root password 127.0.0.1:3306 ${{ matrix.wordpress }}

    - name: Run PHPUnit tests
      run: |
        ./vendor/bin/phpunit --coverage-text --coverage-clover=coverage.xml
      env:
        WP_TESTS_DIR: /tmp/wordpress-tests-lib
        WP_CORE_DIR: /tmp/wordpress/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, mysql, mysqli, pdo_mysql

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        composer install --prefer-dist --no-interaction
        npm ci

    - name: Run PHPMD (PHP Mess Detector)
      run: |
        if [ -f phpmd.xml ]; then
          ./vendor/bin/phpmd . text phpmd.xml --exclude vendor,node_modules,tests
        fi

    - name: Run ESLint
      run: npm run lint:js -- --format=compact

    - name: Run StyleLint
      run: npm run lint:css

    - name: Check for WordPress coding standards
      run: ./vendor/bin/phpcs --standard=WordPress --report=summary .

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'

    - name: Install dependencies
      run: composer install --prefer-dist --no-interaction

    - name: Run integration tests
      run: |
        # Add integration test commands here
        echo "Integration tests would run here"
      env:
        STEWIE_TEST_API_KEY: ${{ secrets.STEWIE_TEST_API_KEY }}
        STEWIE_TEST_URL: ${{ secrets.STEWIE_TEST_URL }}

  build:
    runs-on: ubuntu-latest
    needs: [test, code-quality]
    
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        composer install --no-dev --prefer-dist --no-interaction --optimize-autoloader
        npm ci

    - name: Build production assets
      run: npm run build

    - name: Create plugin package
      run: |
        # Create clean directory for plugin
        mkdir -p /tmp/plugin-build
        
        # Copy plugin files (exclude development files)
        rsync -av \
          --exclude='.git*' \
          --exclude='node_modules' \
          --exclude='tests' \
          --exclude='bin' \
          --exclude='*.json' \
          --exclude='*.md' \
          --exclude='composer.*' \
          --exclude='.github' \
          --exclude='src' \
          --exclude='*.config.js' \
          ./ /tmp/plugin-build/phynite-signup-form/
        
        # Create zip file
        cd /tmp/plugin-build
        zip -r phynite-signup-form.zip phynite-signup-form/

    - name: Upload release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: /tmp/plugin-build/phynite-signup-form.zip
        asset_name: phynite-signup-form.zip
        asset_content_type: application/zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    
    if: github.event_name == 'release' && github.event.release.prerelease == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'

    - name: Deploy to WordPress.org
      run: |
        # WordPress.org deployment would go here
        # This requires WordPress.org SVN credentials
        echo "WordPress.org deployment would run here"
      env:
        WP_ORG_USERNAME: ${{ secrets.WP_ORG_USERNAME }}
        WP_ORG_PASSWORD: ${{ secrets.WP_ORG_PASSWORD }}

  notify:
    runs-on: ubuntu-latest
    needs: [test, code-quality, integration-test]
    
    if: always()
    
    steps:
    - name: Notify team
      run: |
        if [ "${{ needs.test.result }}" = "success" ] && [ "${{ needs.code-quality.result }}" = "success" ]; then
          echo "✅ All tests passed!"
        else
          echo "❌ Some tests failed"
          exit 1
        fi