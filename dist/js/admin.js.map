{"version":3,"file":"js/admin.js","mappings":"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","sources":["webpack://phynite-signup-form/./assets/js/admin.js"],"sourcesContent":["/**\n * Admin JavaScript for Phynite Signup Form\n */\n\n(function($) {\n    'use strict';\n    \n    /**\n     * Admin functionality\n     */\n    const PhyniteAdmin = {\n        \n        init: function() {\n            this.bindEvents();\n            this.initializeColorPickers();\n            this.checkApiStatus();\n        },\n        \n        bindEvents: function() {\n            // Password visibility toggle\n            $('.password-toggle-btn').on('click', this.togglePasswordVisibility);\n            \n            // Form validation\n            $('form').on('submit', this.validateForm);\n            \n            // API connection test\n            $('.phynite-test-connection').on('click', this.testConnection);\n            \n            // Environment change handler\n            $('select[name*=\"environment\"]').on('change', this.updateEnvironmentBadge);\n            \n            // Settings save confirmation\n            $('#submit').on('click', this.showSaveConfirmation);\n            \n            // Tabs functionality (if implemented)\n            $('.phynite-tab').on('click', this.switchTab);\n            \n            // Help toggles\n            $('.phynite-help-toggle').on('click', this.toggleHelp);\n        },\n        \n        /**\n         * Toggle password field visibility\n         */\n        togglePasswordVisibility: function(e) {\n            e.preventDefault();\n            \n            const button = $(this);\n            const input = button.siblings('input');\n            const currentType = input.attr('type');\n            \n            if (currentType === 'password') {\n                input.attr('type', 'text');\n                button.text(phyniteAdmin.hide);\n            } else {\n                input.attr('type', 'password');\n                button.text(phyniteAdmin.show);\n            }\n        },\n        \n        /**\n         * Initialize color pickers\n         */\n        initializeColorPickers: function() {\n            if (typeof wp !== 'undefined' && wp.colorPicker) {\n                $('input[type=\"color\"]').wpColorPicker({\n                    change: function(event, ui) {\n                        const element = event.target;\n                        const color = ui.color.toString();\n                        $(element).val(color).trigger('change');\n                    }\n                });\n            }\n        },\n        \n        /**\n         * Validate admin form\n         */\n        validateForm: function(e) {\n            let isValid = true;\n            const errors = [];\n            \n            // Validate API key\n            const apiKey = $('input[name*=\"api_key\"]').val();\n            if (apiKey && !apiKey.startsWith('phyn_')) {\n                errors.push('API key should start with \"phyn_\"');\n                isValid = false;\n            }\n            \n            // Validate Stewie URL\n            const stewieUrl = $('input[name*=\"stewie_url\"]').val();\n            if (stewieUrl && !stewieUrl.match(/^https?:\\/\\/.+/)) {\n                errors.push('Stewie URL must be a valid HTTP/HTTPS URL');\n                isValid = false;\n            } else if (stewieUrl && stewieUrl.startsWith('http://') && !stewieUrl.includes('localhost')) {\n                errors.push('HTTP URLs are only allowed for localhost development. Use HTTPS for production.');\n                isValid = false;\n            }\n            \n            // Validate rate limit\n            const rateLimit = $('input[name*=\"rate_limit\"]').val();\n            if (rateLimit && (isNaN(rateLimit) || rateLimit < 1 || rateLimit > 60)) {\n                errors.push('Rate limit must be between 1 and 60');\n                isValid = false;\n            }\n            \n            // Show errors if any\n            if (!isValid) {\n                e.preventDefault();\n                PhyniteAdmin.showErrors(errors);\n            }\n            \n            return isValid;\n        },\n        \n        /**\n         * Test API connection\n         */\n        testConnection: function(e) {\n            e.preventDefault();\n            \n            const button = $(this);\n            const originalText = button.text();\n            const statusContainer = $('.phynite-connection-status');\n            \n            // Update button state\n            button.prop('disabled', true)\n                .text('Testing...')\n                .addClass('phynite-loading');\n            \n            // Show loading status\n            statusContainer.html('<div class=\"phynite-status-indicator checking\">Checking API connection...</div>');\n            \n            // Make AJAX request\n            $.ajax({\n                url: ajaxurl,\n                type: 'POST',\n                data: {\n                    action: 'phynite_test_connection',\n                    nonce: phyniteAdmin.nonce\n                },\n                timeout: 10000,\n                success: function(response) {\n                    if (response.success) {\n                        statusContainer.html('<div class=\"phynite-status-indicator connected\">API connection successful!</div>');\n                        PhyniteAdmin.showSuccess('API connection test successful');\n                    } else {\n                        statusContainer.html('<div class=\"phynite-status-indicator error\">Connection failed: ' + response.data.message + '</div>');\n                        PhyniteAdmin.showError('API connection failed: ' + response.data.message);\n                    }\n                },\n                error: function(xhr, status, error) {\n                    let errorMessage = 'Connection test failed';\n                    \n                    if (status === 'timeout') {\n                        errorMessage = 'Connection test timed out';\n                    } else if (xhr.responseJSON && xhr.responseJSON.message) {\n                        errorMessage = xhr.responseJSON.message;\n                    }\n                    \n                    statusContainer.html('<div class=\"phynite-status-indicator error\">' + errorMessage + '</div>');\n                    PhyniteAdmin.showError(errorMessage);\n                },\n                complete: function() {\n                    button.prop('disabled', false)\n                        .text(originalText)\n                        .removeClass('phynite-loading');\n                }\n            });\n        },\n        \n        /**\n         * Check API status on page load\n         */\n        checkApiStatus: function() {\n            const apiKey = $('input[name*=\"api_key\"]').val();\n            const stewieUrl = $('input[name*=\"stewie_url\"]').val();\n            \n            if (!apiKey || !stewieUrl) {\n                $('.phynite-api-status').html('<div class=\"phynite-status-indicator error\">API not configured</div>');\n                return;\n            }\n            \n            $('.phynite-api-status').html('<div class=\"phynite-status-indicator checking\">Checking API status...</div>');\n            \n            // Auto-test connection if credentials are present\n            setTimeout(function() {\n                $('.phynite-test-connection').trigger('click');\n            }, 1000);\n        },\n        \n        /**\n         * Update environment badge and suggest API URL\n         */\n        updateEnvironmentBadge: function() {\n            const environment = $(this).val();\n            const badge = $('.phynite-environment-badge');\n            const stewieUrlField = $('input[name*=\"stewie_url\"]');\n            \n            badge.removeClass('production staging development')\n                .addClass(environment)\n                .text(environment.toUpperCase());\n            \n            // Suggest appropriate API URL based on environment\n            if (stewieUrlField.length && confirm('Would you like to set the recommended API URL for this environment?')) {\n                let recommendedUrl = '';\n                \n                switch (environment) {\n                case 'production':\n                    recommendedUrl = 'https://api.phynitesolutions.com';\n                    break;\n                case 'development':\n                    recommendedUrl = 'http://localhost:4000';\n                    break;\n                case 'staging':\n                    // You can add staging URL here if you have one\n                    recommendedUrl = 'https://api.phynitesolutions.com';\n                    break;\n                }\n                \n                if (recommendedUrl) {\n                    stewieUrlField.val(recommendedUrl);\n                    PhyniteAdmin.showSuccess('API URL updated to: ' + recommendedUrl);\n                }\n            }\n        },\n        \n        /**\n         * Show save confirmation\n         */\n        showSaveConfirmation: function(e) {\n            const hasChanges = PhyniteAdmin.detectChanges();\n            \n            if (hasChanges) {\n                const confirmed = confirm('Are you sure you want to save these settings?');\n                if (!confirmed) {\n                    e.preventDefault();\n                    return false;\n                }\n            }\n        },\n        \n        /**\n         * Switch tabs\n         */\n        switchTab: function(e) {\n            e.preventDefault();\n            \n            const tab = $(this);\n            const targetId = tab.attr('href');\n            \n            // Update tab states\n            $('.phynite-tab').removeClass('active');\n            tab.addClass('active');\n            \n            // Update content\n            $('.phynite-tab-content').hide();\n            $(targetId).show();\n            \n            // Save active tab\n            localStorage.setItem('phynite-active-tab', targetId);\n        },\n        \n        /**\n         * Toggle help sections\n         */\n        toggleHelp: function(e) {\n            e.preventDefault();\n            \n            const toggle = $(this);\n            const helpContent = toggle.next('.phynite-help-content');\n            \n            helpContent.slideToggle(200);\n            toggle.toggleClass('expanded');\n        },\n        \n        /**\n         * Detect form changes\n         */\n        detectChanges: function() {\n            const form = $('form');\n            const currentData = form.serialize();\n            const originalData = form.data('original-data') || currentData;\n            \n            form.data('original-data', originalData);\n            \n            return currentData !== originalData;\n        },\n        \n        /**\n         * Show success message\n         */\n        showSuccess: function(message) {\n            const notice = $('<div class=\"notice notice-success is-dismissible phynite-notice\"><p>' + message + '</p></div>');\n            $('.wrap h1').after(notice);\n            \n            // Auto-dismiss after 5 seconds\n            setTimeout(function() {\n                notice.fadeOut(300, function() {\n                    $(this).remove();\n                });\n            }, 5000);\n        },\n        \n        /**\n         * Show error message\n         */\n        showError: function(message) {\n            const notice = $('<div class=\"notice notice-error is-dismissible phynite-notice\"><p>' + message + '</p></div>');\n            $('.wrap h1').after(notice);\n        },\n        \n        /**\n         * Show multiple errors\n         */\n        showErrors: function(errors) {\n            const errorList = errors.map(error => '<li>' + error + '</li>').join('');\n            const notice = $('<div class=\"notice notice-error is-dismissible phynite-notice\"><ul>' + errorList + '</ul></div>');\n            $('.wrap h1').after(notice);\n        },\n        \n        /**\n         * Copy text to clipboard\n         */\n        copyToClipboard: function(text) {\n            if (navigator.clipboard && window.isSecureContext) {\n                navigator.clipboard.writeText(text).then(function() {\n                    PhyniteAdmin.showSuccess('Copied to clipboard');\n                });\n            } else {\n                // Fallback for older browsers\n                const textArea = document.createElement('textarea');\n                textArea.value = text;\n                textArea.style.position = 'absolute';\n                textArea.style.left = '-999999px';\n                \n                document.body.prepend(textArea);\n                textArea.select();\n                \n                try {\n                    document.execCommand('copy');\n                    PhyniteAdmin.showSuccess('Copied to clipboard');\n                } catch (error) {\n                    PhyniteAdmin.showError('Failed to copy to clipboard');\n                } finally {\n                    textArea.remove();\n                }\n            }\n        },\n        \n        /**\n         * Format code examples\n         */\n        formatCodeExamples: function() {\n            $('.phynite-code').each(function() {\n                const code = $(this);\n                const text = code.text().trim();\n                \n                // Add copy button\n                const copyBtn = $('<button class=\"phynite-copy-btn\" type=\"button\">Copy</button>');\n                code.append(copyBtn);\n                \n                copyBtn.on('click', function(e) {\n                    e.preventDefault();\n                    PhyniteAdmin.copyToClipboard(text);\n                });\n            });\n        },\n        \n        /**\n         * Initialize tooltips\n         */\n        initTooltips: function() {\n            if ($.fn.tooltip) {\n                $('[data-tooltip]').tooltip({\n                    position: { my: 'center bottom-20', at: 'center top' },\n                    content: function() {\n                        return $(this).attr('data-tooltip');\n                    }\n                });\n            }\n        },\n        \n        /**\n         * Auto-save draft settings\n         */\n        autoSaveDraft: function() {\n            const form = $('form');\n            let autoSaveTimer;\n            \n            form.find('input, select, textarea').on('change input', function() {\n                clearTimeout(autoSaveTimer);\n                \n                autoSaveTimer = setTimeout(function() {\n                    const formData = form.serialize();\n                    localStorage.setItem('phynite-draft-settings', formData);\n                    \n                    // Show draft saved indicator\n                    const indicator = $('.phynite-draft-indicator');\n                    indicator.text('Draft saved').fadeIn(200);\n                    \n                    setTimeout(function() {\n                        indicator.fadeOut(200);\n                    }, 2000);\n                }, 2000);\n            });\n        },\n        \n        /**\n         * Load draft settings\n         */\n        loadDraftSettings: function() {\n            const draftData = localStorage.getItem('phynite-draft-settings');\n            \n            if (draftData) {\n                const params = new URLSearchParams(draftData);\n                \n                params.forEach((value, name) => {\n                    const field = $('[name=\"' + name + '\"]');\n                    \n                    if (field.is(':checkbox') || field.is(':radio')) {\n                        field.filter('[value=\"' + value + '\"]').prop('checked', true);\n                    } else {\n                        field.val(value);\n                    }\n                });\n                \n                PhyniteAdmin.showSuccess('Draft settings loaded');\n            }\n        }\n    };\n    \n    /**\n     * Global utility functions\n     */\n    window.togglePasswordVisibility = function(fieldId) {\n        const field = $('#' + fieldId);\n        const currentType = field.attr('type');\n        \n        if (currentType === 'password') {\n            field.attr('type', 'text');\n        } else {\n            field.attr('type', 'password');\n        }\n    };\n    \n    /**\n     * Initialize when DOM is ready\n     */\n    $(document).ready(function() {\n        PhyniteAdmin.init();\n        PhyniteAdmin.formatCodeExamples();\n        PhyniteAdmin.initTooltips();\n        PhyniteAdmin.autoSaveDraft();\n        \n        // Load draft settings if requested\n        if (localStorage.getItem('phynite-load-draft') === 'true') {\n            PhyniteAdmin.loadDraftSettings();\n            localStorage.removeItem('phynite-load-draft');\n        }\n        \n        // Restore active tab\n        const activeTab = localStorage.getItem('phynite-active-tab');\n        if (activeTab) {\n            $('.phynite-tab[href=\"' + activeTab + '\"]').trigger('click');\n        }\n        \n        // Handle dismiss buttons for notices\n        $(document).on('click', '.notice-dismiss', function() {\n            $(this).closest('.notice').fadeOut(300, function() {\n                $(this).remove();\n            });\n        });\n        \n        // Keyboard shortcuts\n        $(document).on('keydown', function(e) {\n            // Ctrl/Cmd + S to save\n            if ((e.ctrlKey || e.metaKey) && e.key === 's') {\n                e.preventDefault();\n                $('#submit').trigger('click');\n            }\n            \n            // Ctrl/Cmd + T to test connection\n            if ((e.ctrlKey || e.metaKey) && e.key === 't') {\n                e.preventDefault();\n                $('.phynite-test-connection').trigger('click');\n            }\n        });\n    });\n    \n})(jQuery);\n\n/**\n * WordPress specific integration\n */\nif (typeof wp !== 'undefined' && wp.hooks) {\n    // Add hooks for other plugins to extend functionality\n    wp.hooks.addAction('phynite.admin.init', 'phynite-signup-form', function() {\n        console.log('Phynite Admin initialized');\n    });\n    \n    wp.hooks.addFilter('phynite.admin.validate', 'phynite-signup-form', function(isValid, formData) {\n        // Allow other plugins to add validation\n        return isValid;\n    });\n}"],"names":["$","PhyniteAdmin","init","this","bindEvents","initializeColorPickers","checkApiStatus","on","togglePasswordVisibility","validateForm","testConnection","updateEnvironmentBadge","showSaveConfirmation","switchTab","toggleHelp","e","preventDefault","button","input","siblings","attr","text","phyniteAdmin","hide","show","wp","colorPicker","wpColorPicker","change","event","ui","element","target","color","toString","val","trigger","isValid","errors","apiKey","startsWith","push","stewieUrl","match","includes","rateLimit","isNaN","showErrors","originalText","statusContainer","prop","addClass","html","ajax","url","ajaxurl","type","data","action","nonce","timeout","success","response","showSuccess","message","showError","error","xhr","status","errorMessage","responseJSON","complete","removeClass","setTimeout","environment","badge","stewieUrlField","toUpperCase","length","confirm","recommendedUrl","detectChanges","tab","targetId","localStorage","setItem","toggle","next","slideToggle","toggleClass","form","currentData","serialize","originalData","notice","after","fadeOut","remove","errorList","map","join","copyToClipboard","navigator","clipboard","window","isSecureContext","writeText","then","textArea","document","createElement","value","style","position","left","body","prepend","select","execCommand","formatCodeExamples","each","code","trim","copyBtn","append","initTooltips","fn","tooltip","my","at","content","autoSaveDraft","autoSaveTimer","find","clearTimeout","formData","indicator","fadeIn","loadDraftSettings","draftData","getItem","URLSearchParams","forEach","name","field","is","filter","fieldId","ready","removeItem","activeTab","closest","ctrlKey","metaKey","key","jQuery","hooks","addAction","console","log","addFilter"],"sourceRoot":""}